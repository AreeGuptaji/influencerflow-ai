generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  onboardingComplete Boolean         @default(false)
  role               UserRole?
  creatorProfileId   String?
  accounts           Account[]
  brandProfile       BrandProfile?
  campaigns          Campaign[]
  creatorProfile     CreatorProfile?
  PaymentMethod      PaymentMethod[]
  posts              Post[]
  sessions           Session[]
}

model CreatorProfile {
  id             String   @id @default(cuid())
  name           String
  username       String?
  email          String?
  bio            String?
  niches         String[]
  followerCount  Int?
  platforms      String[]
  location       String?
  engagementRate Float?
  recentContent  String[]
  contactInfo    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String?  @unique
  user           User?    @relation(fields: [userId], references: [id])
}

model BrandProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String
  industry    String?
  website     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id           String         @id @default(cuid())
  title        String
  description  String
  budget       Int
  startDate    DateTime
  endDate      DateTime
  status       CampaignStatus @default(DRAFT)
  niches       String[]
  location     String?
  minFollowers Int?
  maxFollowers Int?
  brandId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  brand        User           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  Contract     Contract[]
  Negotiation  Negotiation[]
  Payment      Payment[]

  @@index([status])
  @@index([brandId])
}

model Negotiation {
  id            String               @id @default(cuid())
  campaignId    String
  creatorId     String
  creatorEmail  String
  status        NegotiationStatus    @default(PENDING_OUTREACH)
  channel       CommunicationChannel @default(EMAIL)
  aiMode        AIMode               @default(AUTONOMOUS)
  parameters    Json
  emailThreadId String?              @unique
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  Contract      Contract?
  terms         DealTerms?
  messages      Message[]
  campaign      Campaign             @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([creatorId])
  @@index([status])
  @@index([creatorEmail])
}

model Message {
  id            String        @id @default(cuid())
  negotiationId String
  sender        MessageSender
  content       String
  contentType   MessageType   @default(TEXT)
  emailMetadata Json?
  timestamp     DateTime      @default(now())
  negotiation   Negotiation   @relation(fields: [negotiationId], references: [id], onDelete: Cascade)

  @@index([negotiationId])
}

model DealTerms {
  id            String      @id @default(cuid())
  negotiationId String      @unique
  fee           Float
  deliverables  String[]
  timeline      Json
  requirements  String[]
  revisions     Int         @default(0)
  approvedAt    DateTime?
  negotiation   Negotiation @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
}

model Contract {
  id              String         @id @default(cuid())
  campaignId      String
  creatorId       String
  negotiationId   String?        @unique
  status          ContractStatus @default(DRAFT)
  content         String
  version         Int            @default(1)
  signedByBrand   Boolean        @default(false)
  signedByCreator Boolean        @default(false)
  brandSignedAt   DateTime?
  creatorSignedAt DateTime?
  pdfUrl          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deliverables    Json?
  paymentDetails  Json?
  campaign        Campaign       @relation(fields: [campaignId], references: [id])
  negotiation     Negotiation?   @relation(fields: [negotiationId], references: [id])
  payments        Payment[]
}

model ContractTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  content     String
  variables   String[]
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContractClause {
  id         String   @id @default(cuid())
  name       String
  category   String
  content    String
  isRequired Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Payment {
  id              String             @id @default(cuid())
  campaignId      String
  creatorId       String
  contractId      String?
  amount          Int
  currency        String             @default("USD")
  type            PaymentType        @default(DEPOSIT)
  status          PaymentStatus      @default(PENDING)
  description     String?
  stripePaymentId String?
  stripeSessionId String?
  invoiceUrl      String?
  receiptUrl      String?
  createdAt       DateTime           @default(now())
  completedAt     DateTime?
  campaign        Campaign           @relation(fields: [campaignId], references: [id])
  contract        Contract?          @relation(fields: [contractId], references: [id])
  milestones      PaymentMilestone[]
}

model PaymentMilestone {
  id            String          @id @default(cuid())
  paymentId     String
  name          String
  description   String?
  amount        Int
  dueDate       DateTime?
  completedDate DateTime?
  status        MilestoneStatus @default(PENDING)
  deliverables  String[]
  payment       Payment         @relation(fields: [paymentId], references: [id])
}

model PaymentMethod {
  id             String    @id @default(cuid())
  userId         String
  type           String
  name           String
  lastFour       String
  isDefault      Boolean   @default(false)
  stripeMethodId String
  expiryDate     DateTime?
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id])
}

enum UserRole {
  BRAND
  CREATOR
  ADMIN
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum NegotiationStatus {
  PENDING_OUTREACH
  OUTREACH_SENT
  IN_PROGRESS
  TERMS_PROPOSED
  AGREED
  REJECTED
  FAILED
  DONE
}

enum CommunicationChannel {
  EMAIL
}

enum AIMode {
  AUTONOMOUS
  ASSISTED
}

enum MessageSender {
  BRAND_AI
  BRAND_MANUAL
  CREATOR
}

enum MessageType {
  TEXT
  EMAIL_HTML
}

enum ContractStatus {
  DRAFT
  SENT
  SIGNED
  CANCELED
}

enum PaymentType {
  DEPOSIT
  MILESTONE
  FINAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum MilestoneStatus {
  PENDING
  COMPLETED
  OVERDUE
}
