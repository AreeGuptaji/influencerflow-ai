// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
    BRAND
    CREATOR
    ADMIN
}

// Campaign status enum
enum CampaignStatus {
    DRAFT
    ACTIVE
    PAUSED
    COMPLETED
}

// Negotiation System
enum NegotiationStatus {
    PENDING_OUTREACH
    OUTREACH_SENT
    IN_PROGRESS
    TERMS_PROPOSED
    AGREED
    REJECTED
    FAILED
    DONE
}

enum CommunicationChannel {
    EMAIL
    // Future: DM, VOICE_LOG, TEXT_LOG
}

enum AIMode {
    AUTONOMOUS
    ASSISTED
}

enum MessageSender {
    BRAND_AI
    BRAND_MANUAL
    CREATOR
}

enum MessageType {
    TEXT // For general content, could be email plain text
    EMAIL_HTML // For HTML email content
    // Future: AUDIO_TRANSCRIPT
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String          @id @default(cuid())
    name               String?
    email              String?         @unique
    emailVerified      DateTime?
    image              String?
    onboardingComplete Boolean         @default(false)
    role               UserRole?
    creatorProfileId   String?
    accounts           Account[]
    brandProfile       BrandProfile?
    creatorProfile     CreatorProfile?
    campaigns          Campaign[]
    posts              Post[]
    sessions           Session[]
}

model CreatorProfile {
    id             String   @id @default(cuid())
    userId         String?  @unique
    user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
    name           String
    username       String?
    email          String?
    bio            String?
    niches         String[] // Content categories/niches
    followerCount  Int?
    platforms      String[] // Instagram, TikTok, YouTube, etc.
    location       String?
    engagementRate Float?
    recentContent  String[] // Array of recent content links
    contactInfo    String? // Additional contact information

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BrandProfile {
    id          String  @id @default(cuid())
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    companyName String
    industry    String?
    website     String?
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Campaign {
    id           String         @id @default(cuid())
    title        String
    description  String
    budget       Int
    startDate    DateTime
    endDate      DateTime
    status       CampaignStatus @default(DRAFT)
    niches       String[]
    location     String?
    minFollowers Int?
    maxFollowers Int?
    brandId      String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    brand        User           @relation(fields: [brandId], references: [id], onDelete: Cascade)
    Negotiation  Negotiation[]

    @@index([status])
    @@index([brandId])
}

model Negotiation {
    id            String               @id @default(cuid())
    campaignId    String
    creatorId     String
    creatorEmail  String
    status        NegotiationStatus    @default(PENDING_OUTREACH)
    channel       CommunicationChannel @default(EMAIL)
    aiMode        AIMode               @default(AUTONOMOUS)
    parameters    Json
    emailThreadId String?              @unique
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @updatedAt
    terms         DealTerms?
    messages      Message[]
    campaign      Campaign             @relation(fields: [campaignId], references: [id], onDelete: Cascade)

    @@index([campaignId])
    @@index([creatorId])
    @@index([status])
    @@index([creatorEmail])
}

model Message {
    id            String        @id @default(cuid())
    negotiationId String
    sender        MessageSender
    content       String
    contentType   MessageType   @default(TEXT)
    emailMetadata Json?
    timestamp     DateTime      @default(now())
    negotiation   Negotiation   @relation(fields: [negotiationId], references: [id], onDelete: Cascade)

    @@index([negotiationId])
}

model DealTerms {
    id            String      @id @default(cuid())
    negotiationId String      @unique
    fee           Float
    deliverables  String[]
    timeline      Json
    requirements  String[]
    revisions     Int         @default(0)
    approvedAt    DateTime?
    negotiation   Negotiation @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
