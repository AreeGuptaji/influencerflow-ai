// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
    BRAND
    CREATOR
    ADMIN
}

// Campaign status enum
enum CampaignStatus {
    DRAFT
    ACTIVE
    PAUSED
    COMPLETED
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String    @id @default(cuid())
    name               String?
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    role               UserRole?
    onboardingComplete Boolean   @default(false)

    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    brandProfile   BrandProfile?
    creatorProfile CreatorProfile?
    campaigns      Campaign[]
}

model CreatorProfile {
    id             String   @id @default(cuid())
    userId         String   @unique
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    username       String?
    email          String?
    bio            String?
    niches         String[] // Content categories/niches
    followerCount  Int?
    platforms      String[] // Instagram, TikTok, YouTube, etc.
    location       String?
    engagementRate Float?
    recentContent  String[] // Array of recent content links
    contactInfo    String? // Additional contact information

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BrandProfile {
    id          String  @id @default(cuid())
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    companyName String
    industry    String?
    website     String?
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Campaign {
    id           String         @id @default(cuid())
    title        String
    description  String
    budget       Int
    startDate    DateTime
    endDate      DateTime
    status       CampaignStatus @default(DRAFT)
    niches       String[] // Target niches
    location     String?
    minFollowers Int?
    maxFollowers Int?

    brandId String
    brand   User   @relation(fields: [brandId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([status])
    @@index([brandId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
